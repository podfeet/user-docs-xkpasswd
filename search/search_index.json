{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"XKPASSWD User Documentation What is XKPASSWD? XKPASSWD is a web app designed to help you create long, strong, and yet memorable and typable psswords. What's the Problem to be Solved? We all know we should be using long, strong passwords, but we tend to fall back on bad habits because they're hard to remember and hard to type, especially on mobile devices, or even worse \u2013 on a printer. XKPASSWD can help you create passwords for very specific situations, such as creating an Apple ID password that you can type on an iPhone without constant switching back and forth with different keyboard layouts. Is XKPASSWD a Password Manager? NO, XKPASSWD is not a password manager. It doesn't store any passwords you create but rather allows you to copy them and add them to your dedicated password manager. You are using a password manager, right? User Guide to XKPASSWD What does XKPASSWD have to do with the XKCD comic? How can I help with XKPASSWD?","title":"Home"},{"location":"#xkpasswd-user-documentation","text":"","title":"XKPASSWD User Documentation"},{"location":"#what-is-xkpasswd","text":"XKPASSWD is a web app designed to help you create long, strong, and yet memorable and typable psswords.","title":"What is XKPASSWD?"},{"location":"#whats-the-problem-to-be-solved","text":"We all know we should be using long, strong passwords, but we tend to fall back on bad habits because they're hard to remember and hard to type, especially on mobile devices, or even worse \u2013 on a printer. XKPASSWD can help you create passwords for very specific situations, such as creating an Apple ID password that you can type on an iPhone without constant switching back and forth with different keyboard layouts.","title":"What's the Problem to be Solved?"},{"location":"#is-xkpasswd-a-password-manager","text":"NO, XKPASSWD is not a password manager. It doesn't store any passwords you create but rather allows you to copy them and add them to your dedicated password manager. You are using a password manager, right? User Guide to XKPASSWD What does XKPASSWD have to do with the XKCD comic? How can I help with XKPASSWD?","title":"Is XKPASSWD a Password Manager?"},{"location":"about/","text":"About xkpasswd-js is an open source project that is the brainchild of developer and Security Specialist Bart Busschots . This JavaScript version of XKPASSWD is a port of Bart's original perl code. This new version is being developed by primarily by Helma van der Linden along with other open source contributors. If you'd like to get involved in the development, including adding to the wishlist for features, read more here . Philosophy More and more of the things we do on our computer require passwords, and at the same time, it seems we hear about organisations or sites losing user databases on every day that ends in a 'y'. If we re-use our passwords we expose ourselves to an ever greater risk, but we need more passwords than we can possibly remember or invent. Coming up with one good password is easy, but coming up with one good password a week is a lot harder, let alone one a day! Obviously we need some technological help. We need our computers to help us generate robust passwords and store them securely. There are many great password managers out there to help us securely store and sync our passwords, including commercial offerings and open-source projects. Many of these managers also offer to generate random passwords for us, usually in the form of a random string of meaningless letters numbers, and symbols. These kinds of nonsense passwords are certainly secure, but they are often impractical. Regardless of how good your chosen password manager is, there will always be times when you need to type in your passwords, and that's when random gibberish passwords become a real pain point. As annoying as it is to have to glance over and back at a small cellphone screen to manually type a gibberish password into a computer, that's nothing compared to the annoyance of trying to communicate such a password to a family member, friend, colleague, or customer over the phone. Surely it would be better to have passwords that are still truly random in the way humans can't be, but are also human-friendly in the way random gibberish never will be? This is the problem XKPASSWD aims to solve. Rather than randomly choosing many letters, digits, and symbols from a fairly small alphabet of possible characters, XKPASSWD chooses a small number of words from a large 'alphabet' of possible words as the basis for passwords. Words are easy to remember, easy to read from a screen, easy to type, and easy to communicate over the telephone. XKPASSWD uses words to make up the bulk of the passwords it generates, but it also adds carefully placed random symbols and digits to add more security without the passwords being difficult to remember, read, type, or speak. In short, XKPASSWD is for people who prefer passwords that look like this: !15. play-MAJOR.fresh.FLAT. 23! to passwords that look like this: eB8.GJXa@TuM","title":"About"},{"location":"about/#about","text":"xkpasswd-js is an open source project that is the brainchild of developer and Security Specialist Bart Busschots . This JavaScript version of XKPASSWD is a port of Bart's original perl code. This new version is being developed by primarily by Helma van der Linden along with other open source contributors. If you'd like to get involved in the development, including adding to the wishlist for features, read more here .","title":"About"},{"location":"about/#philosophy","text":"More and more of the things we do on our computer require passwords, and at the same time, it seems we hear about organisations or sites losing user databases on every day that ends in a 'y'. If we re-use our passwords we expose ourselves to an ever greater risk, but we need more passwords than we can possibly remember or invent. Coming up with one good password is easy, but coming up with one good password a week is a lot harder, let alone one a day! Obviously we need some technological help. We need our computers to help us generate robust passwords and store them securely. There are many great password managers out there to help us securely store and sync our passwords, including commercial offerings and open-source projects. Many of these managers also offer to generate random passwords for us, usually in the form of a random string of meaningless letters numbers, and symbols. These kinds of nonsense passwords are certainly secure, but they are often impractical. Regardless of how good your chosen password manager is, there will always be times when you need to type in your passwords, and that's when random gibberish passwords become a real pain point. As annoying as it is to have to glance over and back at a small cellphone screen to manually type a gibberish password into a computer, that's nothing compared to the annoyance of trying to communicate such a password to a family member, friend, colleague, or customer over the phone. Surely it would be better to have passwords that are still truly random in the way humans can't be, but are also human-friendly in the way random gibberish never will be? This is the problem XKPASSWD aims to solve. Rather than randomly choosing many letters, digits, and symbols from a fairly small alphabet of possible characters, XKPASSWD chooses a small number of words from a large 'alphabet' of possible words as the basis for passwords. Words are easy to remember, easy to read from a screen, easy to type, and easy to communicate over the telephone. XKPASSWD uses words to make up the bulk of the passwords it generates, but it also adds carefully placed random symbols and digits to add more security without the passwords being difficult to remember, read, type, or speak. In short, XKPASSWD is for people who prefer passwords that look like this: !15. play-MAJOR.fresh.FLAT. 23! to passwords that look like this: eB8.GJXa@TuM","title":"Philosophy"},{"location":"help-xkpasswd/","text":"How to Help With XKPASSWD Yes, and we welcome help. xkpasswd-js is an open source project being managed through GitHub. You can find the repository at xkpasswd-js . Start by reading the README.md where you'll learn about the repository structure and prerequisites . We also have a versioning policy, a source control policy, and a style guide. If all of this sounds intimidating and you just want to document something that doesn't work properly, or maybe tell us about a feature you'd like, you can go directly to the Issues tab and submit a new issue. We also have a discussion area in GitHub where you can chat with contributors about the project, maybe ask questions and share user stories about how awesome XKPASSWD is \ud83d\ude01.","title":"Help the Project"},{"location":"help-xkpasswd/#how-to-help-with-xkpasswd","text":"Yes, and we welcome help. xkpasswd-js is an open source project being managed through GitHub. You can find the repository at xkpasswd-js . Start by reading the README.md where you'll learn about the repository structure and prerequisites . We also have a versioning policy, a source control policy, and a style guide. If all of this sounds intimidating and you just want to document something that doesn't work properly, or maybe tell us about a feature you'd like, you can go directly to the Issues tab and submit a new issue. We also have a discussion area in GitHub where you can chat with contributors about the project, maybe ask questions and share user stories about how awesome XKPASSWD is \ud83d\ude01.","title":"How to Help With XKPASSWD"},{"location":"mkdocs-resources/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"mkdocs-resources/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"mkdocs-resources/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"mkdocs-resources/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"the-maths/","text":"Thar Be Dragons! The Maths Before examining the password strength of passwords generated with this module we need to lay out the relatively simple maths underlying it all. Maths Primer A coin could be used as a very simple password generator. Each character in the password would be the result of a single coin toss. If the coin lands heads up, we add a 'H' to our password, if it lands tails up, we add a 'T'. If you made a one-letter password in this way there would only be two possibilities, 'H', or 'T', or two permutations. If you made a two-letter password in this way there would be four possible combinations, or permutations, 'HH', 'HT', 'TH', and 'TT'. If you made a three-character password in this way there would be 16 permutations, a five character one would have 32 permutations, and so forth. So, for a coin toss, which has two possible values for each character, the formula for the number of permutations 'P' for a given length of password 'L' is: P = 2^L Or, two to the power of the length of the password. If we now swapped our coin for a dice, we would go from two possible values per letter, to six possible values per letter. For one dice roll there would be six permutations, for two there would be 36, for three there would be 108 and so on. This means that for a dice, the number of permutations can be calculated with the formula: P = 6^L When talking about passwords, the set of possible symbols used for each character in the password is referred to as the password's alphabet . So, for the coin toss the alphabet was just H and T , and for the dice, it was 1 , 2 , 3 , 4 , 5 , and 6 . The actual characters used in the alphabet make no difference to the strength of the password, all that matters is the size of the alphabet, which we'll call A . As you can probably infer from the two examples above, the formula for the number of possible permutations P for a password of length L created from an alphabet of size A is: P = A^L In the real world, our passwords are generally made up of a mix of letters, digits, and symbols. If we use mixed case that gives us 52 letters alone, then add in the ten digits from O to 9 and we're already up to 62 possible characters before we even start on the array of symbols and punctuation characters on our keyboards. It's generally accepted that if you include symbols and punctuation, there are 95 characters available for use in randomly generated passwords. Hence, in the real world, the value for A is assumed to be 95. When you start raising a number as big as 95 to even low powers the number of permutations quickly rises. A two-character password with an alphabet of 95 has 9025 permutations, increasing the length to three characters brings that up to 857,375, and so on. These numbers very quickly become too big to handle. For just an 8-character password we are talking about 6,634, 204, 312,890,625 permutations, which is a number so big most people couldn't say it (what do you call something a thousand times bigger than a trillion?) Because the numbers get so astronomically big so quickly, computer scientists use bits of entropy to measure password strength rather than the number of permutations. The formula to turn permutations into bits of entropy E is very simple: E = Log(2)P In other words, the entropy is the log to base two of the permutations. For our eight-character example that equates to about 52 bits. There are two approaches to increasing the number of permutations, and hence the entropy, you can choose more characters, or, you can make the alphabet you are choosing from bigger. The Entropy of XKPASSWD Passwords Exactly how much entropy does a password need? That's the subject of much debate, and the answer ultimately depends on the value of the assets being protected by the password. Two common recommendations you hear are 8 characters containing a mix of upper and lower case letters, digits, and symbols, or 12 characters with the same composition. These evaluate to approximately 52 bits of entropy and 78 bits of entropy respectively. When evaluating the entropy of passwords generated by this module, it has to be done from two points of view for the answer to be meaningful. Firstly, a best-case scenario - the attacker has absolutely no knowledge of how the password was generated, and hence must mount a brute-force attack. Then, secondly from the point of view of an attacker with full knowledge of how the password was generated. Not just the knowledge that this module was used, but a copy of the dictionary file used, and, a copy of the configuration settings used. For the purpose of this documentation, the entropy in the first scenario, the brute force attack, will be referred to as the blind entropy, and the entropy in the second scenario the seen entropy. The blind entropy is solely determined by the configuration settings, the seen entropy depends on both the settings and the dictionary file used. Calculating the bind entropy Eb is quite straightforward, we just need to know the size of the alphabet resulting from the configuration A , and the minimum length of passwords generated with the configuration L , and plug those values into this formula: Eb = Log(2)(A^L) Calculating A simply involves determining whether or not the configuration results in a mix of letter cases (26 or 52 characters), the inclusion of at least one symbol (if any one is present, assume the industry standard of a 33-character search space), and the inclusion of at least one digit (10 characters). This will result in a value between 26 and 95. Calculating L is also straightforward. The one minor complication is that some configurations result in a variable-length password. In this case, assume the shortest possible length the configuration could produce. The example password from the Philosophy section ( !15.play-MAJOR.fresh.FLAT.23! ) was generated using the preset WEB32 . This preset uses four words of between four and five letters long, with the case of each word randomly set to all lower or all upper as the basis for the password, it then chooses two pairs of random digits as extra words to go front and back, before separating each word with a copy of a randomly chosen symbol, and padding the front and back of the password with a copy of a different randomly chosen symbol. This results in passwords that contain a mix of cases, digits, and symbols, and are between 27 and 31 characters long. If we add these values into the formula we find that the blind entropy for passwords created with this preset is: Eb = Log(2)(95^27) = 163 bits This is spectacularly secure! And, this is the most likely kind of attack for a password to face. However, to have confidence in the password we must also now calculate the entropy when the attacker knows everything about how the password was generated. We will calculate the entropy resulting from the same WEB32 config being used to generate a password using the sample library file that ships with the XKPASSWD. The number of permutations the attacker needs to check is purely the product of possible results for each random choice made during the assembly of the password. Let's start with the words that will form the core of the password. The configuration chooses four words of between four and five letters long from the dictionary, and then randomises their case, effectively making it a choice from twice as many words (each word in each case). The sample dictionary file contains 698 words of the configured length, which doubles to 1396. Choosing four words from that very large alphabet gives a starting point of '1396^4 , or 3,797,883,801,856 permutations. Next we need to calculate the permutations for the separator character. The configuration specifies just nine permitted characters, and we choose just one, so that equates to 9 permutations. Similarly, the padding character on the end is chosen from 13 permitted symbols giving 13 more permutations. Finally, there are four randomly chosen digits, giving 10^4 , or 10,000 permutations. The total number of permutations is the product of all these permutations: Pseen = 3,797,883,801,856 * 9 * 13 * 10,000 = 2.77x10^17 Finally, we convert this to entropy by taking the base 2 log: Eseen = Log(2)2.77x10^17 = ~57bits What this means is that most probably, passwords generated with this preset using the sample dictionary file are spectacularly more secure than even 12 randomly chosen characters, and, that in the very unlikely event that an attacker knows absolutely everything about how the password was generated, it is still significantly more secure than 8 randomly chosen characters. Because the exact strength of the passwords produced by this module depends on the configuration and dictionary file used, the constructor does the above math when creating an XPasswd object, and throws a warning if either the blind entropy falls below 78bits, or the seen entropy falls below 52 bits.","title":"Thar be Dragons"},{"location":"the-maths/#thar-be-dragons","text":"","title":"Thar Be Dragons!"},{"location":"the-maths/#the-maths","text":"Before examining the password strength of passwords generated with this module we need to lay out the relatively simple maths underlying it all.","title":"The Maths"},{"location":"the-maths/#maths-primer","text":"A coin could be used as a very simple password generator. Each character in the password would be the result of a single coin toss. If the coin lands heads up, we add a 'H' to our password, if it lands tails up, we add a 'T'. If you made a one-letter password in this way there would only be two possibilities, 'H', or 'T', or two permutations. If you made a two-letter password in this way there would be four possible combinations, or permutations, 'HH', 'HT', 'TH', and 'TT'. If you made a three-character password in this way there would be 16 permutations, a five character one would have 32 permutations, and so forth. So, for a coin toss, which has two possible values for each character, the formula for the number of permutations 'P' for a given length of password 'L' is: P = 2^L Or, two to the power of the length of the password. If we now swapped our coin for a dice, we would go from two possible values per letter, to six possible values per letter. For one dice roll there would be six permutations, for two there would be 36, for three there would be 108 and so on. This means that for a dice, the number of permutations can be calculated with the formula: P = 6^L When talking about passwords, the set of possible symbols used for each character in the password is referred to as the password's alphabet . So, for the coin toss the alphabet was just H and T , and for the dice, it was 1 , 2 , 3 , 4 , 5 , and 6 . The actual characters used in the alphabet make no difference to the strength of the password, all that matters is the size of the alphabet, which we'll call A . As you can probably infer from the two examples above, the formula for the number of possible permutations P for a password of length L created from an alphabet of size A is: P = A^L In the real world, our passwords are generally made up of a mix of letters, digits, and symbols. If we use mixed case that gives us 52 letters alone, then add in the ten digits from O to 9 and we're already up to 62 possible characters before we even start on the array of symbols and punctuation characters on our keyboards. It's generally accepted that if you include symbols and punctuation, there are 95 characters available for use in randomly generated passwords. Hence, in the real world, the value for A is assumed to be 95. When you start raising a number as big as 95 to even low powers the number of permutations quickly rises. A two-character password with an alphabet of 95 has 9025 permutations, increasing the length to three characters brings that up to 857,375, and so on. These numbers very quickly become too big to handle. For just an 8-character password we are talking about 6,634, 204, 312,890,625 permutations, which is a number so big most people couldn't say it (what do you call something a thousand times bigger than a trillion?) Because the numbers get so astronomically big so quickly, computer scientists use bits of entropy to measure password strength rather than the number of permutations. The formula to turn permutations into bits of entropy E is very simple: E = Log(2)P In other words, the entropy is the log to base two of the permutations. For our eight-character example that equates to about 52 bits. There are two approaches to increasing the number of permutations, and hence the entropy, you can choose more characters, or, you can make the alphabet you are choosing from bigger.","title":"Maths Primer"},{"location":"the-maths/#the-entropy-of-xkpasswd-passwords","text":"Exactly how much entropy does a password need? That's the subject of much debate, and the answer ultimately depends on the value of the assets being protected by the password. Two common recommendations you hear are 8 characters containing a mix of upper and lower case letters, digits, and symbols, or 12 characters with the same composition. These evaluate to approximately 52 bits of entropy and 78 bits of entropy respectively. When evaluating the entropy of passwords generated by this module, it has to be done from two points of view for the answer to be meaningful. Firstly, a best-case scenario - the attacker has absolutely no knowledge of how the password was generated, and hence must mount a brute-force attack. Then, secondly from the point of view of an attacker with full knowledge of how the password was generated. Not just the knowledge that this module was used, but a copy of the dictionary file used, and, a copy of the configuration settings used. For the purpose of this documentation, the entropy in the first scenario, the brute force attack, will be referred to as the blind entropy, and the entropy in the second scenario the seen entropy. The blind entropy is solely determined by the configuration settings, the seen entropy depends on both the settings and the dictionary file used. Calculating the bind entropy Eb is quite straightforward, we just need to know the size of the alphabet resulting from the configuration A , and the minimum length of passwords generated with the configuration L , and plug those values into this formula: Eb = Log(2)(A^L) Calculating A simply involves determining whether or not the configuration results in a mix of letter cases (26 or 52 characters), the inclusion of at least one symbol (if any one is present, assume the industry standard of a 33-character search space), and the inclusion of at least one digit (10 characters). This will result in a value between 26 and 95. Calculating L is also straightforward. The one minor complication is that some configurations result in a variable-length password. In this case, assume the shortest possible length the configuration could produce. The example password from the Philosophy section ( !15.play-MAJOR.fresh.FLAT.23! ) was generated using the preset WEB32 . This preset uses four words of between four and five letters long, with the case of each word randomly set to all lower or all upper as the basis for the password, it then chooses two pairs of random digits as extra words to go front and back, before separating each word with a copy of a randomly chosen symbol, and padding the front and back of the password with a copy of a different randomly chosen symbol. This results in passwords that contain a mix of cases, digits, and symbols, and are between 27 and 31 characters long. If we add these values into the formula we find that the blind entropy for passwords created with this preset is: Eb = Log(2)(95^27) = 163 bits This is spectacularly secure! And, this is the most likely kind of attack for a password to face. However, to have confidence in the password we must also now calculate the entropy when the attacker knows everything about how the password was generated. We will calculate the entropy resulting from the same WEB32 config being used to generate a password using the sample library file that ships with the XKPASSWD. The number of permutations the attacker needs to check is purely the product of possible results for each random choice made during the assembly of the password. Let's start with the words that will form the core of the password. The configuration chooses four words of between four and five letters long from the dictionary, and then randomises their case, effectively making it a choice from twice as many words (each word in each case). The sample dictionary file contains 698 words of the configured length, which doubles to 1396. Choosing four words from that very large alphabet gives a starting point of '1396^4 , or 3,797,883,801,856 permutations. Next we need to calculate the permutations for the separator character. The configuration specifies just nine permitted characters, and we choose just one, so that equates to 9 permutations. Similarly, the padding character on the end is chosen from 13 permitted symbols giving 13 more permutations. Finally, there are four randomly chosen digits, giving 10^4 , or 10,000 permutations. The total number of permutations is the product of all these permutations: Pseen = 3,797,883,801,856 * 9 * 13 * 10,000 = 2.77x10^17 Finally, we convert this to entropy by taking the base 2 log: Eseen = Log(2)2.77x10^17 = ~57bits What this means is that most probably, passwords generated with this preset using the sample dictionary file are spectacularly more secure than even 12 randomly chosen characters, and, that in the very unlikely event that an attacker knows absolutely everything about how the password was generated, it is still significantly more secure than 8 randomly chosen characters. Because the exact strength of the passwords produced by this module depends on the configuration and dictionary file used, the constructor does the above math when creating an XPasswd object, and throws a warning if either the blind entropy falls below 78bits, or the seen entropy falls below 52 bits.","title":"The Entropy of XKPASSWD Passwords"},{"location":"user-guide/","text":"User Guide When you first go to xkpasswd.net while the project is in beta, you'll see an explanation of how this tool is being ported from old and busted Perl code to modern web development languages including JavaScript. You'll be invited to push the \"Use the Beta\" button to get started. If you want to skip this step, go directly to the beta version at beta.xkpasswd.net . The tool is not yet feature-complete, but what you can use is functioning properly. If any feature is not functioning properly when you visit the tool, you'll see it labeled as such. Generate Password(s) with Default Configuration If you don't want to fuss around with any kind of settings to generate your passwords, you can simply enter the desired number of passwords and hit the Generate button. By default, this will create 3 highly-complex passwords of the following configuration: 3 English words of 4-8 characters in length where each word has a leading capital letter Each word is separated by a randomly chosen character but is consistent within each password generated 2 digits of padding are on each end of the character-separated words 2 random character symbols are added as final padding on either end For example: %%85?Fell?Tokyo?Building?74%% Copying passwords You have two options to copy the passwords. By default, the passwords are shown in a list format with their own individual copy buttons which will copy directly to your clipboard. The second radio button lets you view the same password list as a block of text that is pre-selected. This view lets you simply use Command/Control-C to copy all of the offered passwords and paste them elsewhere for modification or to let you have a big list of passwords when you're changing several of them at the same time. Presets For ease of use, XKPASSWD comes with a set of predefined presets. Presets can be used as-is, or, they can be used as a starting point for creating your own configuration. Note that one of the presets is for security questions. You should never give a real answer to a security question because this is the kind of information that's easy to get in a phishing attack. Think about how easy it would be to find out the city in which you went to high school for example. Instead of answering truthfully, use the SECURITYQ preset and store the question and answer in your password manager. The following presets are defined: APPLEID A preset respecting the many prerequisites Apple places on Apple ID passwords. Apple's official password policy is located here: http://support.apple.com/kb/ht4232 . Note that Apple's knowledgebase article neglects to mention that passwords can't be longer than 32 characters. This preset is also configured to use only characters that are easy to type on the standard iOS keyboard, i.e. those appearing on the letters keyboard ( ABC ) or the numbers keyboard .?123 , and not those on the harder-to-reach symbols keyboard #+= . Below is a sample password generated with this preset: `@60:london:TAUGHT:forget:70@` DEFAULT The default configuration. Below is a sample password generated with this preset: `12:settle:SUCCEED:summer:48` NTLM A preset for 14-character NTMLv1 (NTLM Version 1) passwords. ONLY USE THIS PRESET IF YOU MUST! The 14-character limit does not allow for sufficient entropy in the case where the attacker knows the dictionary and config used to generate the password, hence this preset will generate low entropy warnings. Below is a sample password generated with this preset: `0=mAYAN=sCART@` SECURITYQ A preset for creating fake answers to security questions. It generates long nonsense sentences ending in . , ! or ? , for example: `Wales outside full month minutes gentle?` TEMPORARY A preset for temporary use when required to be spoken over the phone. These are not secure passwords and should be changed immediately. WEB16 A preset for websites that don't allow more than 16-character long passwords. Because 16 characters is not very long, a large set of symbols are chosen from for the padding and separator. Below is a sample password generated with this preset: `:baby.ohio.DEAR:` WEB32 A preset for websites that don't allow more than 32-character long passwords. Below is a sample password generated with this preset: `+93-took-CASE-money-AHEAD-31+` WIFI A preset for generating 63-character-long WPA2 keys (most routers allow 64 characters, but some only 63, hence the odd length). Below is a sample password generated with this preset: `2736_ITSELF_PARTIAL_QUICKLY_SCOTLAND_wild_people_7441!!!!!!!!!!` XKCD A preset inspired by the original XKCD comic , but with some alterations to provide sufficient entropy to avoid low entropy warnings. Below is a sample password generated with this preset: `KING-madrid-exercise-BELGIUM` Settings The Settings section allows you to tailor passwords to your specifications. Settings reflect the Preset which has been selected. Words The Words part of Setting is pretty self-explanatory. In the current version, the only Dictionary available is English, but it's on the roadmap to have more dictionaries. You can set the number of words and the minimum and maximum length of the words. The shortest length allowable is 4 characters, while the maximum length is allowable is 12. You can set both min and max to the same value. Error thrown if value isn't 4-12 characters Transformations Including both upper and lower case letters in your password dramatically increases the strength. XKPASSWD allows you six different ways to transform your text, including two that don't use both upper and lower case letters. alternating WORD case Capitalise First Letter CAPITALISE eVERY IETTER eXCEPT tHe fIRST lower case UPPER CASE EVERY word randomly CAPITALISED or NOT Note that the last option will not always generate a password with both upper and lower case letters, as it's random whether each word will be capitalized or not. Separators Separators are the special characters that will be placed between the words in your password. These separator characters serve two purposes. They make the password easier to read and remember, and they increase the strength of the password. The password will be stronger because there are more characters to search for to break it, and the password will be longer which means harder to break. You have three options of how to have XKPASSWD to generate your password: -none- will put all of the words right up against each other Specified Character - a field will be open in which you can type a specific special character you want to use Random Character will choose from an alphabet of special characters. ELABORATE AFTER ALPHABET ERRORS ARE FIXED Padding Padding refers to digits and symbols added before and after the words in your password. First, specify from 0-6 digits (numbers) before and/or after the words. Next, you can tailor the format of special character symbols that will be repeated before and after the digits. Choose one of three options for the Type of characters for Padding None - no special characters will be repeated on either side of the digits Fixed - specify the number of symbols before and after the password. You can set these two values to be 0-5 symbols. Adaptive - in some instances, you may want to create a password that is of a specified length. If you set Type to Adaptive and then specify the length you'd like the complete password to be, XKPASSWD will add enough symbols to make that happen. You can pad the length from 8 to 999 characters. Finally, you can set the Padding Type in one of three ways. Separator Character - consistency throughout your password Specified Character - allows you to define a specific character to be repeated Random Character - lets XKPASSWD choose a character to be repeated","title":"User Guide"},{"location":"user-guide/#user-guide","text":"When you first go to xkpasswd.net while the project is in beta, you'll see an explanation of how this tool is being ported from old and busted Perl code to modern web development languages including JavaScript. You'll be invited to push the \"Use the Beta\" button to get started. If you want to skip this step, go directly to the beta version at beta.xkpasswd.net . The tool is not yet feature-complete, but what you can use is functioning properly. If any feature is not functioning properly when you visit the tool, you'll see it labeled as such.","title":"User Guide"},{"location":"user-guide/#generate-passwords-with-default-configuration","text":"If you don't want to fuss around with any kind of settings to generate your passwords, you can simply enter the desired number of passwords and hit the Generate button. By default, this will create 3 highly-complex passwords of the following configuration: 3 English words of 4-8 characters in length where each word has a leading capital letter Each word is separated by a randomly chosen character but is consistent within each password generated 2 digits of padding are on each end of the character-separated words 2 random character symbols are added as final padding on either end For example: %%85?Fell?Tokyo?Building?74%%","title":"Generate Password(s) with Default Configuration"},{"location":"user-guide/#copying-passwords","text":"You have two options to copy the passwords. By default, the passwords are shown in a list format with their own individual copy buttons which will copy directly to your clipboard. The second radio button lets you view the same password list as a block of text that is pre-selected. This view lets you simply use Command/Control-C to copy all of the offered passwords and paste them elsewhere for modification or to let you have a big list of passwords when you're changing several of them at the same time.","title":"Copying passwords"},{"location":"user-guide/#presets","text":"For ease of use, XKPASSWD comes with a set of predefined presets. Presets can be used as-is, or, they can be used as a starting point for creating your own configuration. Note that one of the presets is for security questions. You should never give a real answer to a security question because this is the kind of information that's easy to get in a phishing attack. Think about how easy it would be to find out the city in which you went to high school for example. Instead of answering truthfully, use the SECURITYQ preset and store the question and answer in your password manager. The following presets are defined:","title":"Presets"},{"location":"user-guide/#appleid","text":"A preset respecting the many prerequisites Apple places on Apple ID passwords. Apple's official password policy is located here: http://support.apple.com/kb/ht4232 . Note that Apple's knowledgebase article neglects to mention that passwords can't be longer than 32 characters. This preset is also configured to use only characters that are easy to type on the standard iOS keyboard, i.e. those appearing on the letters keyboard ( ABC ) or the numbers keyboard .?123 , and not those on the harder-to-reach symbols keyboard #+= . Below is a sample password generated with this preset: `@60:london:TAUGHT:forget:70@`","title":"APPLEID"},{"location":"user-guide/#default","text":"The default configuration. Below is a sample password generated with this preset: `12:settle:SUCCEED:summer:48`","title":"DEFAULT"},{"location":"user-guide/#ntlm","text":"A preset for 14-character NTMLv1 (NTLM Version 1) passwords. ONLY USE THIS PRESET IF YOU MUST! The 14-character limit does not allow for sufficient entropy in the case where the attacker knows the dictionary and config used to generate the password, hence this preset will generate low entropy warnings. Below is a sample password generated with this preset: `0=mAYAN=sCART@`","title":"NTLM"},{"location":"user-guide/#securityq","text":"A preset for creating fake answers to security questions. It generates long nonsense sentences ending in . , ! or ? , for example: `Wales outside full month minutes gentle?`","title":"SECURITYQ"},{"location":"user-guide/#temporary","text":"A preset for temporary use when required to be spoken over the phone. These are not secure passwords and should be changed immediately.","title":"TEMPORARY"},{"location":"user-guide/#web16","text":"A preset for websites that don't allow more than 16-character long passwords. Because 16 characters is not very long, a large set of symbols are chosen from for the padding and separator. Below is a sample password generated with this preset: `:baby.ohio.DEAR:`","title":"WEB16"},{"location":"user-guide/#web32","text":"A preset for websites that don't allow more than 32-character long passwords. Below is a sample password generated with this preset: `+93-took-CASE-money-AHEAD-31+`","title":"WEB32"},{"location":"user-guide/#wifi","text":"A preset for generating 63-character-long WPA2 keys (most routers allow 64 characters, but some only 63, hence the odd length). Below is a sample password generated with this preset: `2736_ITSELF_PARTIAL_QUICKLY_SCOTLAND_wild_people_7441!!!!!!!!!!`","title":"WIFI"},{"location":"user-guide/#xkcd","text":"A preset inspired by the original XKCD comic , but with some alterations to provide sufficient entropy to avoid low entropy warnings. Below is a sample password generated with this preset: `KING-madrid-exercise-BELGIUM`","title":"XKCD"},{"location":"user-guide/#settings","text":"The Settings section allows you to tailor passwords to your specifications. Settings reflect the Preset which has been selected.","title":"Settings"},{"location":"user-guide/#words","text":"The Words part of Setting is pretty self-explanatory. In the current version, the only Dictionary available is English, but it's on the roadmap to have more dictionaries. You can set the number of words and the minimum and maximum length of the words. The shortest length allowable is 4 characters, while the maximum length is allowable is 12. You can set both min and max to the same value. Error thrown if value isn't 4-12 characters","title":"Words"},{"location":"user-guide/#transformations","text":"Including both upper and lower case letters in your password dramatically increases the strength. XKPASSWD allows you six different ways to transform your text, including two that don't use both upper and lower case letters. alternating WORD case Capitalise First Letter CAPITALISE eVERY IETTER eXCEPT tHe fIRST lower case UPPER CASE EVERY word randomly CAPITALISED or NOT Note that the last option will not always generate a password with both upper and lower case letters, as it's random whether each word will be capitalized or not.","title":"Transformations"},{"location":"user-guide/#separators","text":"Separators are the special characters that will be placed between the words in your password. These separator characters serve two purposes. They make the password easier to read and remember, and they increase the strength of the password. The password will be stronger because there are more characters to search for to break it, and the password will be longer which means harder to break. You have three options of how to have XKPASSWD to generate your password: -none- will put all of the words right up against each other Specified Character - a field will be open in which you can type a specific special character you want to use Random Character will choose from an alphabet of special characters. ELABORATE AFTER ALPHABET ERRORS ARE FIXED","title":"Separators"},{"location":"user-guide/#padding","text":"Padding refers to digits and symbols added before and after the words in your password. First, specify from 0-6 digits (numbers) before and/or after the words. Next, you can tailor the format of special character symbols that will be repeated before and after the digits. Choose one of three options for the Type of characters for Padding None - no special characters will be repeated on either side of the digits Fixed - specify the number of symbols before and after the password. You can set these two values to be 0-5 symbols. Adaptive - in some instances, you may want to create a password that is of a specified length. If you set Type to Adaptive and then specify the length you'd like the complete password to be, XKPASSWD will add enough symbols to make that happen. You can pad the length from 8 to 999 characters. Finally, you can set the Padding Type in one of three ways. Separator Character - consistency throughout your password Specified Character - allows you to define a specific character to be repeated Random Character - lets XKPASSWD choose a character to be repeated","title":"Padding"},{"location":"xkcd-comic/","text":"What does XKPASSWD have to do with XKCD? One of Randall Munroe's fabulous XKCD comics was part of the inspiration for XKPASSWD. In the comic entitled \"Password Strength\", he illustrates how creating a super long gibberish passsword with upper and lower case letters, numbers, and symbols is nearly uncrackable and proves it by showing how many bits of entropy are in the password example. But it also explains how that same password is nearly impossible to remember. But then he shows how a long enough password that's actually human-readable, memorable, and easy to type can have even more entropy, as long as the words in the password are randomly chosen. Steve Gibson also influenced the project with his Password Haystacks page at https://www.grc.com/haystack.htm where you can experiment with password length and adding digits and special characters to make passwords harder to crack. This concept is the basis for the math behind creating long, strong, memorable, and typable passwords using XKPASSWD.","title":"XKCD and XKPASSWD"},{"location":"xkcd-comic/#what-does-xkpasswd-have-to-do-with-xkcd","text":"One of Randall Munroe's fabulous XKCD comics was part of the inspiration for XKPASSWD. In the comic entitled \"Password Strength\", he illustrates how creating a super long gibberish passsword with upper and lower case letters, numbers, and symbols is nearly uncrackable and proves it by showing how many bits of entropy are in the password example. But it also explains how that same password is nearly impossible to remember. But then he shows how a long enough password that's actually human-readable, memorable, and easy to type can have even more entropy, as long as the words in the password are randomly chosen. Steve Gibson also influenced the project with his Password Haystacks page at https://www.grc.com/haystack.htm where you can experiment with password length and adding digits and special characters to make passwords harder to crack. This concept is the basis for the math behind creating long, strong, memorable, and typable passwords using XKPASSWD.","title":"What does XKPASSWD have to do with XKCD?"}]}